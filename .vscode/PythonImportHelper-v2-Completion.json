[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "ConvexHull",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "tilde",
        "kind": 2,
        "importPath": "assignment7.test_cases.check",
        "description": "assignment7.test_cases.check",
        "peekOfCode": "def tilde(x):\n    if x.find('~') == -1:\n        return '~'+x\n    return x\nwith open(sys.argv[2], 'r') as file:\n    ls = file.readlines()\n    for l in ls:\n        l = l.strip().split()\n        x = l[0]\n        if l[1] == 'True' or l[1] == 'true':",
        "detail": "assignment7.test_cases.check",
        "documentation": {}
    },
    {
        "label": "vals",
        "kind": 5,
        "importPath": "assignment7.test_cases.check",
        "description": "assignment7.test_cases.check",
        "peekOfCode": "vals = dict()\ndef tilde(x):\n    if x.find('~') == -1:\n        return '~'+x\n    return x\nwith open(sys.argv[2], 'r') as file:\n    ls = file.readlines()\n    for l in ls:\n        l = l.strip().split()\n        x = l[0]",
        "detail": "assignment7.test_cases.check",
        "documentation": {}
    },
    {
        "label": "input_file_path",
        "kind": 5,
        "importPath": "assignment7.convexHullChecker",
        "description": "assignment7.convexHullChecker",
        "peekOfCode": "input_file_path = sys.argv[1]\noutput_file_path = sys.argv[2]\n# Read points from the in.txt file\nwith open(input_file_path, \"r\") as f:\n    n = int(f.readline())\n    in_points = [tuple(map(float, line.strip().split())) for line in f]\n# Extract x and y coordinates from input points\nin_x_coords = [point[0] for point in in_points]\nin_y_coords = [point[1] for point in in_points]\n# Compute the convex hull of the input points",
        "detail": "assignment7.convexHullChecker",
        "documentation": {}
    },
    {
        "label": "output_file_path",
        "kind": 5,
        "importPath": "assignment7.convexHullChecker",
        "description": "assignment7.convexHullChecker",
        "peekOfCode": "output_file_path = sys.argv[2]\n# Read points from the in.txt file\nwith open(input_file_path, \"r\") as f:\n    n = int(f.readline())\n    in_points = [tuple(map(float, line.strip().split())) for line in f]\n# Extract x and y coordinates from input points\nin_x_coords = [point[0] for point in in_points]\nin_y_coords = [point[1] for point in in_points]\n# Compute the convex hull of the input points\ninput_convex_hull = ConvexHull(in_points)",
        "detail": "assignment7.convexHullChecker",
        "documentation": {}
    },
    {
        "label": "in_x_coords",
        "kind": 5,
        "importPath": "assignment7.convexHullChecker",
        "description": "assignment7.convexHullChecker",
        "peekOfCode": "in_x_coords = [point[0] for point in in_points]\nin_y_coords = [point[1] for point in in_points]\n# Compute the convex hull of the input points\ninput_convex_hull = ConvexHull(in_points)\nconvexHull_out = []\n# print(\"Convex Hull of Input Points:\")\nfor i in input_convex_hull.vertices:\n    # x y \n    convexHull_out.append(tuple([in_points[i][0], in_points[i][1]]))\nwith open(\"output_code.txt\", \"w\") as f:",
        "detail": "assignment7.convexHullChecker",
        "documentation": {}
    },
    {
        "label": "in_y_coords",
        "kind": 5,
        "importPath": "assignment7.convexHullChecker",
        "description": "assignment7.convexHullChecker",
        "peekOfCode": "in_y_coords = [point[1] for point in in_points]\n# Compute the convex hull of the input points\ninput_convex_hull = ConvexHull(in_points)\nconvexHull_out = []\n# print(\"Convex Hull of Input Points:\")\nfor i in input_convex_hull.vertices:\n    # x y \n    convexHull_out.append(tuple([in_points[i][0], in_points[i][1]]))\nwith open(\"output_code.txt\", \"w\") as f:\n    for i in input_convex_hull.vertices:",
        "detail": "assignment7.convexHullChecker",
        "documentation": {}
    },
    {
        "label": "input_convex_hull",
        "kind": 5,
        "importPath": "assignment7.convexHullChecker",
        "description": "assignment7.convexHullChecker",
        "peekOfCode": "input_convex_hull = ConvexHull(in_points)\nconvexHull_out = []\n# print(\"Convex Hull of Input Points:\")\nfor i in input_convex_hull.vertices:\n    # x y \n    convexHull_out.append(tuple([in_points[i][0], in_points[i][1]]))\nwith open(\"output_code.txt\", \"w\") as f:\n    for i in input_convex_hull.vertices:\n        f.write(str(in_points[i][0]) + \" \" + str(in_points[i][1]) + \"\\n\")\nwith open(output_file_path, \"r\") as f:",
        "detail": "assignment7.convexHullChecker",
        "documentation": {}
    },
    {
        "label": "convexHull_out",
        "kind": 5,
        "importPath": "assignment7.convexHullChecker",
        "description": "assignment7.convexHullChecker",
        "peekOfCode": "convexHull_out = []\n# print(\"Convex Hull of Input Points:\")\nfor i in input_convex_hull.vertices:\n    # x y \n    convexHull_out.append(tuple([in_points[i][0], in_points[i][1]]))\nwith open(\"output_code.txt\", \"w\") as f:\n    for i in input_convex_hull.vertices:\n        f.write(str(in_points[i][0]) + \" \" + str(in_points[i][1]) + \"\\n\")\nwith open(output_file_path, \"r\") as f:\n    out_points = [tuple(map(float, line.strip().split())) for line in f]",
        "detail": "assignment7.convexHullChecker",
        "documentation": {}
    }
]